name: "game build, push"

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - dev
    paths:
      - ".github/workflows/**"
      - "client_lib/**"
      - "my-core-bot/**"
      - "server/**"
  pull_request:
    paths:
      - ".github/workflows/**"
      - "client_lib/**"
      - "my-core-bot/**"
      - "server/**"
  create:
    tags:
      - "v*"

permissions:
  contents: read
  packages: write

env:
  SERVER_IMAGE: ghcr.io/${{ github.repository_owner }}/server
  BOT_IMAGE: ghcr.io/${{ github.repository_owner }}/my-core-bot
  RUNNER_AMD64: &RUNNER_AMD64 ubuntu-24.04 # set this to ubuntu-24.04 for github hosted runners and X64 for self-hosted runners
  RUNNER_ARM64: &RUNNER_ARM64 ubuntu-24.04-arm # set this to ubuntu-24.04-arm for github hosted runners and ARM64 for self-hosted runners

concurrency:
  group: "${{ github.workflow }} @ ${{ github.ref_name }}"
  cancel-in-progress: true

jobs:
  # PR validation for server image (no push)
  pr-build-test:
    if: github.event_name == 'pull_request'
    runs-on: *RUNNER_AMD64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 1

      # Use docker driver so bot build can see local server image
      - name: Set up Docker Buildx (driver=docker)
        id: builder
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker
          install: true
          use: true

      - name: Docker meta (server)
        id: meta-server
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.SERVER_IMAGE }}

      - name: Build server (PR, local only)
        uses: docker/build-push-action@v6
        with:
          context: ${{ github.workspace }}
          file: .github/workflows/server-Dockerfile
          builder: ${{ steps.builder.outputs.name }}
          platforms: linux/amd64
          tags: local/server:pr-${{ github.event.pull_request.head.sha }}
          load: true
          push: false
          provenance: false

      - name: Build my-core-bot (PR, local only)
        uses: docker/build-push-action@v6
        with:
          context: ${{ github.workspace }}
          file: .github/workflows/my-core-bot-Dockerfile
          builder: ${{ steps.builder.outputs.name }}
          platforms: linux/amd64
          build-args: |
            SERVER_IMAGE=local/server
            TAG_NAME=pr-${{ github.event.pull_request.head.sha }}
          pull: false
          push: false
          provenance: false

  # Per-arch build: build server, tag temp per-arch for bot, then build bot â€” all in one job/matrix
  build-per-arch:
    if: github.event_name != 'pull_request'
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: amd64
            runner: *RUNNER_AMD64
            platform: linux/amd64
          - arch: arm64
            runner: *RUNNER_ARM64
            platform: linux/arm64
    runs-on:
      - ${{ matrix.runner }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 1

      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
          echo "TEMP_TAG=${{ github.ref_name }}-ci-${{ matrix.arch }}-${{ github.run_id }}-${{ github.run_attempt }}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta (server)
        id: meta-server
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.SERVER_IMAGE }}

      - name: Docker meta (my-core-bot)
        id: meta-bot
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.BOT_IMAGE }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build server, push by digest; also create a temp per-arch tag for bot to consume immediately
      - name: Build and push by digest (server)
        id: build-server
        uses: docker/build-push-action@v6
        with:
          context: ${{ github.workspace }}
          file: .github/workflows/server-Dockerfile
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta-server.outputs.labels }}
          tags: ${{ env.SERVER_IMAGE }}
          outputs: type=image,push-by-digest=true,name-canonical=true,push=true
          provenance: false
          cache-from: |
            type=registry,ref=${{ env.SERVER_IMAGE }}:buildcache-${{ github.ref_name }}-${{ matrix.arch }}
            type=registry,ref=${{ env.SERVER_IMAGE }}:buildcache-main-${{ matrix.arch }}
          cache-to: type=registry,ref=${{ env.SERVER_IMAGE }}:buildcache-${{ github.ref_name }}-${{ matrix.arch }},mode=max

      - name: Tag server image with temp per-arch tag
        run: |
          digest="${{ steps.build-server.outputs.digest }}"
          docker buildx imagetools create -t ${{ env.SERVER_IMAGE }}:${{ env.TEMP_TAG }} ${{ env.SERVER_IMAGE }}@${digest}

      - name: Export digest (server)
        run: |
          mkdir -p ${{ runner.temp }}/digests-server
          digest="${{ steps.build-server.outputs.digest }}"
          touch "${{ runner.temp }}/digests-server/${digest#sha256:}"

      - name: Upload digest (server)
        uses: actions/upload-artifact@v4
        with:
          name: server-digests-${{ matrix.arch }}
          path: ${{ runner.temp }}/digests-server/*
          if-no-files-found: error
          retention-days: 1

      # Build bot on same runner arch, consuming the temp-tagged server image
      - name: Build and push by digest (my-core-bot)
        id: build-bot
        uses: docker/build-push-action@v6
        with:
          context: ${{ github.workspace }}
          file: .github/workflows/my-core-bot-Dockerfile
          build-args: |
            SERVER_IMAGE=${{ env.SERVER_IMAGE }}
            TAG_NAME=${{ env.TEMP_TAG }}
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta-bot.outputs.labels }}
          tags: ${{ env.BOT_IMAGE }}
          outputs: type=image,push-by-digest=true,name-canonical=true,push=true
          provenance: false
          cache-from: |
            type=registry,ref=${{ env.BOT_IMAGE }}:buildcache-${{ github.ref_name }}-${{ matrix.arch }}
            type=registry,ref=${{ env.BOT_IMAGE }}:buildcache-main-${{ matrix.arch }}
          cache-to: type=registry,ref=${{ env.BOT_IMAGE }}:buildcache-${{ github.ref_name }}-${{ matrix.arch }},mode=max

      - name: Export digest (my-core-bot)
        run: |
          mkdir -p ${{ runner.temp }}/digests-bot
          digest="${{ steps.build-bot.outputs.digest }}"
          touch "${{ runner.temp }}/digests-bot/${digest#sha256:}"

      - name: Upload digest (my-core-bot)
        uses: actions/upload-artifact@v4
        with:
          name: bot-digests-${{ matrix.arch }}
          path: ${{ runner.temp }}/digests-bot/*
          if-no-files-found: error
          retention-days: 1

  # Merge server digests into multi-arch manifest
  push-server-merge:
    if: github.event_name != 'pull_request'
    runs-on: *RUNNER_AMD64
    needs: build-per-arch
    steps:
      - name: Download digests (server)
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: server-digests-*
          merge-multiple: true

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta (server)
        id: meta-server
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.SERVER_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=raw,value=${{ github.ref_name }}-${{ github.sha }}

      - name: Generate additional version tags (server)
        id: version-tags-server
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          # Extract version from tag (remove 'v' prefix if present)
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}

          # Split version into parts
          IFS='.' read -r -a parts <<< "$VERSION"

          # Generate hierarchical tags based on number of parts
          ADDITIONAL_TAGS=""
          if [ ${#parts[@]} -ge 1 ]; then
            ADDITIONAL_TAGS="${{ env.SERVER_IMAGE }}:v${parts[0]}"
          fi
          if [ ${#parts[@]} -ge 2 ]; then
            ADDITIONAL_TAGS="$ADDITIONAL_TAGS,${{ env.SERVER_IMAGE }}:v${parts[0]}.${parts[1]}"
          fi
          if [ ${#parts[@]} -ge 3 ]; then
            ADDITIONAL_TAGS="$ADDITIONAL_TAGS,${{ env.SERVER_IMAGE }}:v${parts[0]}.${parts[1]}.${parts[2]}"
          fi
          if [ ${#parts[@]} -ge 4 ]; then
            ADDITIONAL_TAGS="$ADDITIONAL_TAGS,${{ env.SERVER_IMAGE }}:v${parts[0]}.${parts[1]}.${parts[2]}.${parts[3]}"
          fi

          echo "additional-tags=$ADDITIONAL_TAGS" >> $GITHUB_OUTPUT
          echo "Generated additional tags: $ADDITIONAL_TAGS"

      - name: Create manifest list and push (server)
        working-directory: ${{ runner.temp }}/digests
        run: |
          # Create manifest for base tags from metadata
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.SERVER_IMAGE }}@sha256:%s ' *)

          # Create manifest for additional version tags if they exist
          if [ -n "${{ steps.version-tags-server.outputs.additional-tags }}" ]; then
            IFS=',' read -r -a additional_tags <<< "${{ steps.version-tags-server.outputs.additional-tags }}"
            for tag in "${additional_tags[@]}"; do
              if [ -n "$tag" ]; then
                echo "Creating manifest for additional tag: $tag"
                docker buildx imagetools create -t "$tag" \
                  $(printf '${{ env.SERVER_IMAGE }}@sha256:%s ' *)
              fi
            done
          fi

      - name: Inspect image (server)
        run: |
          docker buildx imagetools inspect ${{ env.SERVER_IMAGE }}:${{ steps.meta-server.outputs.version }}

  # Merge bot digests into multi-arch manifest
  push-bot-merge:
    if: github.event_name != 'pull_request'
    runs-on: *RUNNER_AMD64
    needs: build-per-arch
    steps:
      - name: Download digests (my-core-bot)
        uses: actions/download-artifact@v4

        with:
          path: ${{ runner.temp }}/digests-bot
          pattern: bot-digests-*
          merge-multiple: true

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta (my-core-bot)
        id: meta-bot
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.BOT_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=raw,value=${{ github.ref_name }}-${{ github.sha }}

      - name: Generate additional version tags (my-core-bot)
        id: version-tags-bot
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          # Extract version from tag (remove 'v' prefix if present)
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}

          # Split version into parts
          IFS='.' read -r -a parts <<< "$VERSION"

          # Generate hierarchical tags based on number of parts
          ADDITIONAL_TAGS=""
          if [ ${#parts[@]} -ge 1 ]; then
            ADDITIONAL_TAGS="${{ env.BOT_IMAGE }}:v${parts[0]}"
          fi
          if [ ${#parts[@]} -ge 2 ]; then
            ADDITIONAL_TAGS="$ADDITIONAL_TAGS,${{ env.BOT_IMAGE }}:v${parts[0]}.${parts[1]}"
          fi
          if [ ${#parts[@]} -ge 3 ]; then
            ADDITIONAL_TAGS="$ADDITIONAL_TAGS,${{ env.BOT_IMAGE }}:v${parts[0]}.${parts[1]}.${parts[2]}"
          fi
          if [ ${#parts[@]} -ge 4 ]; then
            ADDITIONAL_TAGS="$ADDITIONAL_TAGS,${{ env.BOT_IMAGE }}:v${parts[0]}.${parts[1]}.${parts[2]}.${parts[3]}"
          fi

          echo "additional-tags=$ADDITIONAL_TAGS" >> $GITHUB_OUTPUT
          echo "Generated additional tags: $ADDITIONAL_TAGS"

      - name: Create manifest list and push (my-core-bot)
        working-directory: ${{ runner.temp }}/digests-bot
        run: |
          # Create manifest for base tags from metadata
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.BOT_IMAGE }}@sha256:%s ' *)

          # Create manifest for additional version tags if they exist
          if [ -n "${{ steps.version-tags-bot.outputs.additional-tags }}" ]; then
            IFS=',' read -r -a additional_tags <<< "${{ steps.version-tags-bot.outputs.additional-tags }}"
            for tag in "${additional_tags[@]}"; do
              if [ -n "$tag" ]; then
                echo "Creating manifest for additional tag: $tag"
                docker buildx imagetools create -t "$tag" \
                  $(printf '${{ env.BOT_IMAGE }}@sha256:%s ' *)
              fi
            done
          fi

      - name: Inspect image (my-core-bot)
        run: |
          docker buildx imagetools inspect ${{ env.BOT_IMAGE }}:${{ steps.meta-bot.outputs.version }}
